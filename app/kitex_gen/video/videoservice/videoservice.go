// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"go-tiktok/app/kitex_gen/video"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":      kitex.NewMethodInfo(feedHandler, newFeedArgs, newFeedResult, false),
		"PubAction": kitex.NewMethodInfo(pubActionHandler, newPubActionArgs, newPubActionResult, false),
		"PubList":   kitex.NewMethodInfo(pubListHandler, newPubListArgs, newPubListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).Feed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FeedArgs:
		success, err := handler.(video.VideoService).Feed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedResult)
		realResult.Success = success
	}
	return nil
}
func newFeedArgs() interface{} {
	return &FeedArgs{}
}

func newFeedResult() interface{} {
	return &FeedResult{}
}

type FeedArgs struct {
	Req *video.FeedRequest
}

func (p *FeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FeedArgs) Unmarshal(in []byte) error {
	msg := new(video.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedArgs_Req_DEFAULT *video.FeedRequest

func (p *FeedArgs) GetReq() *video.FeedRequest {
	if !p.IsSetReq() {
		return FeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type FeedResult struct {
	Success *video.FeedResponse
}

var FeedResult_Success_DEFAULT *video.FeedResponse

func (p *FeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FeedResult) Unmarshal(in []byte) error {
	msg := new(video.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedResult) GetSuccess() *video.FeedResponse {
	if !p.IsSetSuccess() {
		return FeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.FeedResponse)
}

func (p *FeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func pubActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PubActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PubAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PubActionArgs:
		success, err := handler.(video.VideoService).PubAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PubActionResult)
		realResult.Success = success
	}
	return nil
}
func newPubActionArgs() interface{} {
	return &PubActionArgs{}
}

func newPubActionResult() interface{} {
	return &PubActionResult{}
}

type PubActionArgs struct {
	Req *video.PubActionRequest
}

func (p *PubActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PubActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PubActionArgs) Unmarshal(in []byte) error {
	msg := new(video.PubActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PubActionArgs_Req_DEFAULT *video.PubActionRequest

func (p *PubActionArgs) GetReq() *video.PubActionRequest {
	if !p.IsSetReq() {
		return PubActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PubActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type PubActionResult struct {
	Success *video.PubActionResponse
}

var PubActionResult_Success_DEFAULT *video.PubActionResponse

func (p *PubActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PubActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PubActionResult) Unmarshal(in []byte) error {
	msg := new(video.PubActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PubActionResult) GetSuccess() *video.PubActionResponse {
	if !p.IsSetSuccess() {
		return PubActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PubActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PubActionResponse)
}

func (p *PubActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func pubListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PubListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PubList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PubListArgs:
		success, err := handler.(video.VideoService).PubList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PubListResult)
		realResult.Success = success
	}
	return nil
}
func newPubListArgs() interface{} {
	return &PubListArgs{}
}

func newPubListResult() interface{} {
	return &PubListResult{}
}

type PubListArgs struct {
	Req *video.PubListRequest
}

func (p *PubListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PubListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PubListArgs) Unmarshal(in []byte) error {
	msg := new(video.PubListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PubListArgs_Req_DEFAULT *video.PubListRequest

func (p *PubListArgs) GetReq() *video.PubListRequest {
	if !p.IsSetReq() {
		return PubListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PubListArgs) IsSetReq() bool {
	return p.Req != nil
}

type PubListResult struct {
	Success *video.PubListResponse
}

var PubListResult_Success_DEFAULT *video.PubListResponse

func (p *PubListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PubListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PubListResult) Unmarshal(in []byte) error {
	msg := new(video.PubListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PubListResult) GetSuccess() *video.PubListResponse {
	if !p.IsSetSuccess() {
		return PubListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PubListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PubListResponse)
}

func (p *PubListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, Req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args FeedArgs
	_args.Req = Req
	var _result FeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PubAction(ctx context.Context, Req *video.PubActionRequest) (r *video.PubActionResponse, err error) {
	var _args PubActionArgs
	_args.Req = Req
	var _result PubActionResult
	if err = p.c.Call(ctx, "PubAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PubList(ctx context.Context, Req *video.PubListRequest) (r *video.PubListResponse, err error) {
	var _args PubListArgs
	_args.Req = Req
	var _result PubListResult
	if err = p.c.Call(ctx, "PubList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
